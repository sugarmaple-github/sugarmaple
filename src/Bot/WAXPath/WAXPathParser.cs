//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from WAXPath.g4 by ANTLR 4.13.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.1")]
[System.CLSCompliant(false)]
public partial class WAXPathParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, T__6=7, T__7=8, T__8=9, 
		T__9=10, T__10=11, T__11=12, T__12=13, T__13=14, T__14=15, T__15=16, T__16=17, 
		T__17=18, T__18=19, T__19=20, ID=21, StringCharacters=22, WS=23;
	public const int
		RULE_ap = 0, RULE_filePath = 1, RULE_rp = 2, RULE_pathFilter = 3, RULE_tagName = 4, 
		RULE_attName = 5, RULE_fileName = 6;
	public static readonly string[] ruleNames = {
		"ap", "filePath", "rp", "pathFilter", "tagName", "attName", "fileName"
	};

	private static readonly string[] _LiteralNames = {
		null, "'/'", "'//'", "'doc'", "'('", "')'", "'*'", "'.'", "'..'", "'text()'", 
		"'@'", "'['", "']'", "','", "'='", "'=='", "'eq'", "'is'", "'and'", "'or'", 
		"'not'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, "ID", "StringCharacters", 
		"WS"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "WAXPath.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static WAXPathParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public WAXPathParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public WAXPathParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class ApContext : ParserRuleContext {
		public ApContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ap; } }
	 
		public ApContext() { }
		public virtual void CopyFrom(ApContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class ApSlashContext : ApContext {
		[System.Diagnostics.DebuggerNonUserCode] public FilePathContext filePath() {
			return GetRuleContext<FilePathContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public RpContext rp() {
			return GetRuleContext<RpContext>(0);
		}
		public ApSlashContext(ApContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IWAXPathListener typedListener = listener as IWAXPathListener;
			if (typedListener != null) typedListener.EnterApSlash(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IWAXPathListener typedListener = listener as IWAXPathListener;
			if (typedListener != null) typedListener.ExitApSlash(this);
		}
	}
	public partial class ApTwoSlashContext : ApContext {
		[System.Diagnostics.DebuggerNonUserCode] public FilePathContext filePath() {
			return GetRuleContext<FilePathContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public RpContext rp() {
			return GetRuleContext<RpContext>(0);
		}
		public ApTwoSlashContext(ApContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IWAXPathListener typedListener = listener as IWAXPathListener;
			if (typedListener != null) typedListener.EnterApTwoSlash(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IWAXPathListener typedListener = listener as IWAXPathListener;
			if (typedListener != null) typedListener.ExitApTwoSlash(this);
		}
	}

	[RuleVersion(0)]
	public ApContext ap() {
		ApContext _localctx = new ApContext(Context, State);
		EnterRule(_localctx, 0, RULE_ap);
		try {
			State = 22;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,0,Context) ) {
			case 1:
				_localctx = new ApSlashContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 14;
				filePath();
				State = 15;
				Match(T__0);
				State = 16;
				rp(0);
				}
				break;
			case 2:
				_localctx = new ApTwoSlashContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 18;
				filePath();
				State = 19;
				Match(T__1);
				State = 20;
				rp(0);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FilePathContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public FileNameContext fileName() {
			return GetRuleContext<FileNameContext>(0);
		}
		public FilePathContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_filePath; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IWAXPathListener typedListener = listener as IWAXPathListener;
			if (typedListener != null) typedListener.EnterFilePath(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IWAXPathListener typedListener = listener as IWAXPathListener;
			if (typedListener != null) typedListener.ExitFilePath(this);
		}
	}

	[RuleVersion(0)]
	public FilePathContext filePath() {
		FilePathContext _localctx = new FilePathContext(Context, State);
		EnterRule(_localctx, 2, RULE_filePath);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 24;
			Match(T__2);
			State = 25;
			Match(T__3);
			State = 26;
			fileName();
			State = 27;
			Match(T__4);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RpContext : ParserRuleContext {
		public RpContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_rp; } }
	 
		public RpContext() { }
		public virtual void CopyFrom(RpContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class RpTextContext : RpContext {
		public RpTextContext(RpContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IWAXPathListener typedListener = listener as IWAXPathListener;
			if (typedListener != null) typedListener.EnterRpText(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IWAXPathListener typedListener = listener as IWAXPathListener;
			if (typedListener != null) typedListener.ExitRpText(this);
		}
	}
	public partial class RpChildrenContext : RpContext {
		public RpChildrenContext(RpContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IWAXPathListener typedListener = listener as IWAXPathListener;
			if (typedListener != null) typedListener.EnterRpChildren(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IWAXPathListener typedListener = listener as IWAXPathListener;
			if (typedListener != null) typedListener.ExitRpChildren(this);
		}
	}
	public partial class RpAttNameContext : RpContext {
		[System.Diagnostics.DebuggerNonUserCode] public AttNameContext attName() {
			return GetRuleContext<AttNameContext>(0);
		}
		public RpAttNameContext(RpContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IWAXPathListener typedListener = listener as IWAXPathListener;
			if (typedListener != null) typedListener.EnterRpAttName(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IWAXPathListener typedListener = listener as IWAXPathListener;
			if (typedListener != null) typedListener.ExitRpAttName(this);
		}
	}
	public partial class RpSlashContext : RpContext {
		[System.Diagnostics.DebuggerNonUserCode] public RpContext[] rp() {
			return GetRuleContexts<RpContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public RpContext rp(int i) {
			return GetRuleContext<RpContext>(i);
		}
		public RpSlashContext(RpContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IWAXPathListener typedListener = listener as IWAXPathListener;
			if (typedListener != null) typedListener.EnterRpSlash(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IWAXPathListener typedListener = listener as IWAXPathListener;
			if (typedListener != null) typedListener.ExitRpSlash(this);
		}
	}
	public partial class RpParentContext : RpContext {
		public RpParentContext(RpContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IWAXPathListener typedListener = listener as IWAXPathListener;
			if (typedListener != null) typedListener.EnterRpParent(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IWAXPathListener typedListener = listener as IWAXPathListener;
			if (typedListener != null) typedListener.ExitRpParent(this);
		}
	}
	public partial class RpTagNameContext : RpContext {
		[System.Diagnostics.DebuggerNonUserCode] public TagNameContext tagName() {
			return GetRuleContext<TagNameContext>(0);
		}
		public RpTagNameContext(RpContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IWAXPathListener typedListener = listener as IWAXPathListener;
			if (typedListener != null) typedListener.EnterRpTagName(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IWAXPathListener typedListener = listener as IWAXPathListener;
			if (typedListener != null) typedListener.ExitRpTagName(this);
		}
	}
	public partial class RpCurrentContext : RpContext {
		public RpCurrentContext(RpContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IWAXPathListener typedListener = listener as IWAXPathListener;
			if (typedListener != null) typedListener.EnterRpCurrent(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IWAXPathListener typedListener = listener as IWAXPathListener;
			if (typedListener != null) typedListener.ExitRpCurrent(this);
		}
	}
	public partial class RpFilterContext : RpContext {
		[System.Diagnostics.DebuggerNonUserCode] public RpContext rp() {
			return GetRuleContext<RpContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PathFilterContext pathFilter() {
			return GetRuleContext<PathFilterContext>(0);
		}
		public RpFilterContext(RpContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IWAXPathListener typedListener = listener as IWAXPathListener;
			if (typedListener != null) typedListener.EnterRpFilter(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IWAXPathListener typedListener = listener as IWAXPathListener;
			if (typedListener != null) typedListener.ExitRpFilter(this);
		}
	}
	public partial class RpBracketContext : RpContext {
		[System.Diagnostics.DebuggerNonUserCode] public RpContext rp() {
			return GetRuleContext<RpContext>(0);
		}
		public RpBracketContext(RpContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IWAXPathListener typedListener = listener as IWAXPathListener;
			if (typedListener != null) typedListener.EnterRpBracket(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IWAXPathListener typedListener = listener as IWAXPathListener;
			if (typedListener != null) typedListener.ExitRpBracket(this);
		}
	}
	public partial class RpCommaContext : RpContext {
		[System.Diagnostics.DebuggerNonUserCode] public RpContext[] rp() {
			return GetRuleContexts<RpContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public RpContext rp(int i) {
			return GetRuleContext<RpContext>(i);
		}
		public RpCommaContext(RpContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IWAXPathListener typedListener = listener as IWAXPathListener;
			if (typedListener != null) typedListener.EnterRpComma(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IWAXPathListener typedListener = listener as IWAXPathListener;
			if (typedListener != null) typedListener.ExitRpComma(this);
		}
	}
	public partial class RpDoubleSlashContext : RpContext {
		[System.Diagnostics.DebuggerNonUserCode] public RpContext[] rp() {
			return GetRuleContexts<RpContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public RpContext rp(int i) {
			return GetRuleContext<RpContext>(i);
		}
		public RpDoubleSlashContext(RpContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IWAXPathListener typedListener = listener as IWAXPathListener;
			if (typedListener != null) typedListener.EnterRpDoubleSlash(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IWAXPathListener typedListener = listener as IWAXPathListener;
			if (typedListener != null) typedListener.ExitRpDoubleSlash(this);
		}
	}

	[RuleVersion(0)]
	public RpContext rp() {
		return rp(0);
	}

	private RpContext rp(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		RpContext _localctx = new RpContext(Context, _parentState);
		RpContext _prevctx = _localctx;
		int _startState = 4;
		EnterRecursionRule(_localctx, 4, RULE_rp, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 41;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case ID:
				{
				_localctx = new RpTagNameContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;

				State = 30;
				tagName();
				}
				break;
			case T__5:
				{
				_localctx = new RpChildrenContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 31;
				Match(T__5);
				}
				break;
			case T__6:
				{
				_localctx = new RpCurrentContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 32;
				Match(T__6);
				}
				break;
			case T__7:
				{
				_localctx = new RpParentContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 33;
				Match(T__7);
				}
				break;
			case T__8:
				{
				_localctx = new RpTextContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 34;
				Match(T__8);
				}
				break;
			case T__9:
				{
				_localctx = new RpAttNameContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 35;
				Match(T__9);
				State = 36;
				attName();
				}
				break;
			case T__3:
				{
				_localctx = new RpBracketContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 37;
				Match(T__3);
				State = 38;
				rp(0);
				State = 39;
				Match(T__4);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			Context.Stop = TokenStream.LT(-1);
			State = 59;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,3,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 57;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,2,Context) ) {
					case 1:
						{
						_localctx = new RpSlashContext(new RpContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_rp);
						State = 43;
						if (!(Precpred(Context, 4))) throw new FailedPredicateException(this, "Precpred(Context, 4)");
						State = 44;
						Match(T__0);
						State = 45;
						rp(5);
						}
						break;
					case 2:
						{
						_localctx = new RpDoubleSlashContext(new RpContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_rp);
						State = 46;
						if (!(Precpred(Context, 3))) throw new FailedPredicateException(this, "Precpred(Context, 3)");
						State = 47;
						Match(T__1);
						State = 48;
						rp(4);
						}
						break;
					case 3:
						{
						_localctx = new RpCommaContext(new RpContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_rp);
						State = 49;
						if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
						State = 50;
						Match(T__12);
						State = 51;
						rp(2);
						}
						break;
					case 4:
						{
						_localctx = new RpFilterContext(new RpContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_rp);
						State = 52;
						if (!(Precpred(Context, 2))) throw new FailedPredicateException(this, "Precpred(Context, 2)");
						State = 53;
						Match(T__10);
						State = 54;
						pathFilter(0);
						State = 55;
						Match(T__11);
						}
						break;
					}
					} 
				}
				State = 61;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,3,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class PathFilterContext : ParserRuleContext {
		public PathFilterContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_pathFilter; } }
	 
		public PathFilterContext() { }
		public virtual void CopyFrom(PathFilterContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class PfRpContext : PathFilterContext {
		[System.Diagnostics.DebuggerNonUserCode] public RpContext rp() {
			return GetRuleContext<RpContext>(0);
		}
		public PfRpContext(PathFilterContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IWAXPathListener typedListener = listener as IWAXPathListener;
			if (typedListener != null) typedListener.EnterPfRp(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IWAXPathListener typedListener = listener as IWAXPathListener;
			if (typedListener != null) typedListener.ExitPfRp(this);
		}
	}
	public partial class PfBracketContext : PathFilterContext {
		[System.Diagnostics.DebuggerNonUserCode] public PathFilterContext pathFilter() {
			return GetRuleContext<PathFilterContext>(0);
		}
		public PfBracketContext(PathFilterContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IWAXPathListener typedListener = listener as IWAXPathListener;
			if (typedListener != null) typedListener.EnterPfBracket(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IWAXPathListener typedListener = listener as IWAXPathListener;
			if (typedListener != null) typedListener.ExitPfBracket(this);
		}
	}
	public partial class PfIsContext : PathFilterContext {
		[System.Diagnostics.DebuggerNonUserCode] public RpContext[] rp() {
			return GetRuleContexts<RpContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public RpContext rp(int i) {
			return GetRuleContext<RpContext>(i);
		}
		public PfIsContext(PathFilterContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IWAXPathListener typedListener = listener as IWAXPathListener;
			if (typedListener != null) typedListener.EnterPfIs(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IWAXPathListener typedListener = listener as IWAXPathListener;
			if (typedListener != null) typedListener.ExitPfIs(this);
		}
	}
	public partial class PfNotContext : PathFilterContext {
		[System.Diagnostics.DebuggerNonUserCode] public PathFilterContext pathFilter() {
			return GetRuleContext<PathFilterContext>(0);
		}
		public PfNotContext(PathFilterContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IWAXPathListener typedListener = listener as IWAXPathListener;
			if (typedListener != null) typedListener.EnterPfNot(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IWAXPathListener typedListener = listener as IWAXPathListener;
			if (typedListener != null) typedListener.ExitPfNot(this);
		}
	}
	public partial class PfEqContext : PathFilterContext {
		[System.Diagnostics.DebuggerNonUserCode] public RpContext[] rp() {
			return GetRuleContexts<RpContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public RpContext rp(int i) {
			return GetRuleContext<RpContext>(i);
		}
		public PfEqContext(PathFilterContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IWAXPathListener typedListener = listener as IWAXPathListener;
			if (typedListener != null) typedListener.EnterPfEq(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IWAXPathListener typedListener = listener as IWAXPathListener;
			if (typedListener != null) typedListener.ExitPfEq(this);
		}
	}
	public partial class PfAndContext : PathFilterContext {
		[System.Diagnostics.DebuggerNonUserCode] public PathFilterContext[] pathFilter() {
			return GetRuleContexts<PathFilterContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public PathFilterContext pathFilter(int i) {
			return GetRuleContext<PathFilterContext>(i);
		}
		public PfAndContext(PathFilterContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IWAXPathListener typedListener = listener as IWAXPathListener;
			if (typedListener != null) typedListener.EnterPfAnd(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IWAXPathListener typedListener = listener as IWAXPathListener;
			if (typedListener != null) typedListener.ExitPfAnd(this);
		}
	}
	public partial class PfOrContext : PathFilterContext {
		[System.Diagnostics.DebuggerNonUserCode] public PathFilterContext[] pathFilter() {
			return GetRuleContexts<PathFilterContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public PathFilterContext pathFilter(int i) {
			return GetRuleContext<PathFilterContext>(i);
		}
		public PfOrContext(PathFilterContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IWAXPathListener typedListener = listener as IWAXPathListener;
			if (typedListener != null) typedListener.EnterPfOr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IWAXPathListener typedListener = listener as IWAXPathListener;
			if (typedListener != null) typedListener.ExitPfOr(this);
		}
	}

	[RuleVersion(0)]
	public PathFilterContext pathFilter() {
		return pathFilter(0);
	}

	private PathFilterContext pathFilter(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		PathFilterContext _localctx = new PathFilterContext(Context, _parentState);
		PathFilterContext _prevctx = _localctx;
		int _startState = 6;
		EnterRecursionRule(_localctx, 6, RULE_pathFilter, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 86;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,4,Context) ) {
			case 1:
				{
				_localctx = new PfRpContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;

				State = 63;
				rp(0);
				}
				break;
			case 2:
				{
				_localctx = new PfEqContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 64;
				rp(0);
				State = 65;
				Match(T__13);
				State = 66;
				rp(0);
				}
				break;
			case 3:
				{
				_localctx = new PfIsContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 68;
				rp(0);
				State = 69;
				Match(T__14);
				State = 70;
				rp(0);
				}
				break;
			case 4:
				{
				_localctx = new PfEqContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 72;
				rp(0);
				State = 73;
				Match(T__15);
				State = 74;
				rp(0);
				}
				break;
			case 5:
				{
				_localctx = new PfIsContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 76;
				rp(0);
				State = 77;
				Match(T__16);
				State = 78;
				rp(0);
				}
				break;
			case 6:
				{
				_localctx = new PfBracketContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 80;
				Match(T__3);
				State = 81;
				pathFilter(0);
				State = 82;
				Match(T__4);
				}
				break;
			case 7:
				{
				_localctx = new PfNotContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 84;
				Match(T__19);
				State = 85;
				pathFilter(1);
				}
				break;
			}
			Context.Stop = TokenStream.LT(-1);
			State = 96;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,6,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 94;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,5,Context) ) {
					case 1:
						{
						_localctx = new PfAndContext(new PathFilterContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_pathFilter);
						State = 88;
						if (!(Precpred(Context, 3))) throw new FailedPredicateException(this, "Precpred(Context, 3)");
						State = 89;
						Match(T__17);
						State = 90;
						pathFilter(4);
						}
						break;
					case 2:
						{
						_localctx = new PfOrContext(new PathFilterContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_pathFilter);
						State = 91;
						if (!(Precpred(Context, 2))) throw new FailedPredicateException(this, "Precpred(Context, 2)");
						State = 92;
						Match(T__18);
						State = 93;
						pathFilter(3);
						}
						break;
					}
					} 
				}
				State = 98;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,6,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class TagNameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(WAXPathParser.ID, 0); }
		public TagNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tagName; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IWAXPathListener typedListener = listener as IWAXPathListener;
			if (typedListener != null) typedListener.EnterTagName(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IWAXPathListener typedListener = listener as IWAXPathListener;
			if (typedListener != null) typedListener.ExitTagName(this);
		}
	}

	[RuleVersion(0)]
	public TagNameContext tagName() {
		TagNameContext _localctx = new TagNameContext(Context, State);
		EnterRule(_localctx, 8, RULE_tagName);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 99;
			Match(ID);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AttNameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(WAXPathParser.ID, 0); }
		public AttNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_attName; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IWAXPathListener typedListener = listener as IWAXPathListener;
			if (typedListener != null) typedListener.EnterAttName(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IWAXPathListener typedListener = listener as IWAXPathListener;
			if (typedListener != null) typedListener.ExitAttName(this);
		}
	}

	[RuleVersion(0)]
	public AttNameContext attName() {
		AttNameContext _localctx = new AttNameContext(Context, State);
		EnterRule(_localctx, 10, RULE_attName);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 101;
			Match(ID);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FileNameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode StringCharacters() { return GetToken(WAXPathParser.StringCharacters, 0); }
		public FileNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fileName; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IWAXPathListener typedListener = listener as IWAXPathListener;
			if (typedListener != null) typedListener.EnterFileName(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IWAXPathListener typedListener = listener as IWAXPathListener;
			if (typedListener != null) typedListener.ExitFileName(this);
		}
	}

	[RuleVersion(0)]
	public FileNameContext fileName() {
		FileNameContext _localctx = new FileNameContext(Context, State);
		EnterRule(_localctx, 12, RULE_fileName);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 103;
			Match(StringCharacters);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 2: return rp_sempred((RpContext)_localctx, predIndex);
		case 3: return pathFilter_sempred((PathFilterContext)_localctx, predIndex);
		}
		return true;
	}
	private bool rp_sempred(RpContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(Context, 4);
		case 1: return Precpred(Context, 3);
		case 2: return Precpred(Context, 1);
		case 3: return Precpred(Context, 2);
		}
		return true;
	}
	private bool pathFilter_sempred(PathFilterContext _localctx, int predIndex) {
		switch (predIndex) {
		case 4: return Precpred(Context, 3);
		case 5: return Precpred(Context, 2);
		}
		return true;
	}

	private static int[] _serializedATN = {
		4,1,23,106,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,1,0,
		1,0,1,0,1,0,1,0,1,0,1,0,1,0,3,0,23,8,0,1,1,1,1,1,1,1,1,1,1,1,2,1,2,1,2,
		1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,3,2,42,8,2,1,2,1,2,1,2,1,2,1,2,1,2,
		1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,5,2,58,8,2,10,2,12,2,61,9,2,1,3,1,3,1,
		3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,
		1,3,1,3,1,3,1,3,3,3,87,8,3,1,3,1,3,1,3,1,3,1,3,1,3,5,3,95,8,3,10,3,12,
		3,98,9,3,1,4,1,4,1,5,1,5,1,6,1,6,1,6,0,2,4,6,7,0,2,4,6,8,10,12,0,0,117,
		0,22,1,0,0,0,2,24,1,0,0,0,4,41,1,0,0,0,6,86,1,0,0,0,8,99,1,0,0,0,10,101,
		1,0,0,0,12,103,1,0,0,0,14,15,3,2,1,0,15,16,5,1,0,0,16,17,3,4,2,0,17,23,
		1,0,0,0,18,19,3,2,1,0,19,20,5,2,0,0,20,21,3,4,2,0,21,23,1,0,0,0,22,14,
		1,0,0,0,22,18,1,0,0,0,23,1,1,0,0,0,24,25,5,3,0,0,25,26,5,4,0,0,26,27,3,
		12,6,0,27,28,5,5,0,0,28,3,1,0,0,0,29,30,6,2,-1,0,30,42,3,8,4,0,31,42,5,
		6,0,0,32,42,5,7,0,0,33,42,5,8,0,0,34,42,5,9,0,0,35,36,5,10,0,0,36,42,3,
		10,5,0,37,38,5,4,0,0,38,39,3,4,2,0,39,40,5,5,0,0,40,42,1,0,0,0,41,29,1,
		0,0,0,41,31,1,0,0,0,41,32,1,0,0,0,41,33,1,0,0,0,41,34,1,0,0,0,41,35,1,
		0,0,0,41,37,1,0,0,0,42,59,1,0,0,0,43,44,10,4,0,0,44,45,5,1,0,0,45,58,3,
		4,2,5,46,47,10,3,0,0,47,48,5,2,0,0,48,58,3,4,2,4,49,50,10,1,0,0,50,51,
		5,13,0,0,51,58,3,4,2,2,52,53,10,2,0,0,53,54,5,11,0,0,54,55,3,6,3,0,55,
		56,5,12,0,0,56,58,1,0,0,0,57,43,1,0,0,0,57,46,1,0,0,0,57,49,1,0,0,0,57,
		52,1,0,0,0,58,61,1,0,0,0,59,57,1,0,0,0,59,60,1,0,0,0,60,5,1,0,0,0,61,59,
		1,0,0,0,62,63,6,3,-1,0,63,87,3,4,2,0,64,65,3,4,2,0,65,66,5,14,0,0,66,67,
		3,4,2,0,67,87,1,0,0,0,68,69,3,4,2,0,69,70,5,15,0,0,70,71,3,4,2,0,71,87,
		1,0,0,0,72,73,3,4,2,0,73,74,5,16,0,0,74,75,3,4,2,0,75,87,1,0,0,0,76,77,
		3,4,2,0,77,78,5,17,0,0,78,79,3,4,2,0,79,87,1,0,0,0,80,81,5,4,0,0,81,82,
		3,6,3,0,82,83,5,5,0,0,83,87,1,0,0,0,84,85,5,20,0,0,85,87,3,6,3,1,86,62,
		1,0,0,0,86,64,1,0,0,0,86,68,1,0,0,0,86,72,1,0,0,0,86,76,1,0,0,0,86,80,
		1,0,0,0,86,84,1,0,0,0,87,96,1,0,0,0,88,89,10,3,0,0,89,90,5,18,0,0,90,95,
		3,6,3,4,91,92,10,2,0,0,92,93,5,19,0,0,93,95,3,6,3,3,94,88,1,0,0,0,94,91,
		1,0,0,0,95,98,1,0,0,0,96,94,1,0,0,0,96,97,1,0,0,0,97,7,1,0,0,0,98,96,1,
		0,0,0,99,100,5,21,0,0,100,9,1,0,0,0,101,102,5,21,0,0,102,11,1,0,0,0,103,
		104,5,22,0,0,104,13,1,0,0,0,7,22,41,57,59,86,94,96
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
